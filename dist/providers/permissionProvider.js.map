{"version":3,"sources":["../../src/providers/permissionProvider.js"],"names":["BaseProvider","providePermissiosn","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AAC7D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,gBAAT,EAA2B,kCAA3B,EAA+DM,QAA/D;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHP,wBAAQH,IAAR;AACH;AACJ,SAND;AAOH,KATM,CAAP;AAUH,CAXD;kBAYe;AACXH,8BADW;AAEXC;AAFW,C","file":"permissionProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport crypto from \"crypto\";\n\nconst providePermissiosn = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"permissionName\", \" permissionName Required field!!\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                resolve(body);\n            }\n        });\n    });\n};\nexport default {\n    BaseProvider,\n    providePermissiosn\n};"]}