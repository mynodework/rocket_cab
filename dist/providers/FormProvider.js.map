{"version":3,"sources":["../../src/providers/FormProvider.js"],"names":["BaseProvider","formProvider","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","createHash","update","toString","digest"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;;;;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AACvD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,SAAT,EAAoB,0BAApB,EAAgDM,QAAhD;AACAN,iBAAS,MAAT,EAAiB,wBAAjB,EAA2CM,QAA3C;AACAN,iBAAS,YAAT,EAAuB,6BAAvB,EAAsDM,QAAtD;AACAN,iBAAS,YAAT,EAAuB,6BAAvB,EAAsDM,QAAtD;AACAN,iBAAS,gBAAT,EAA2B,kCAA3B,EAA+DM,QAA/D;AACAN,iBAAS,SAAT,EAAoB,0BAApB,EAAgDM,QAAhD;AACAN,iBAAS,SAAT,EAAoB,0BAApB,EAAgDM,QAAhD;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHV,qBAAK,SAAL,IAAkB,iBAAOW,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCZ,KAAK,SAAL,EAAgBa,QAAhB,EAAnC,EAA+DC,MAA/D,CAAsE,KAAtE,CAAlB;AACAX,wBAAQH,IAAR;AACH;AACJ,SAPD;AAQH,KAhBM,CAAP;AAiBH,CAlBD;kBAmBe;AACXH,8BADW;AAEXC;AAFW,C","file":"FormProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport crypto from \"crypto\";\n\nconst formProvider = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"form-id\", \"form-id Required field!!\").notEmpty();\n        validate(\"name\", \" name Required field!!\").notEmpty();\n        validate(\"company-id\", \"company-id Required field!!\").notEmpty();\n        validate(\"process-id\", \"process-id Required field!!\").notEmpty();\n        validate(\"interaction-id\", \" interaction-id Required field!!\").notEmpty();\n        validate(\"task-id\", \"task-id Required field!!\").notEmpty();\n        validate(\"creator\", \"creator Required field!!\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body['form-id'] = crypto.createHash(\"sha256\").update(body['form-id'].toString()).digest(\"hex\");\n                resolve(body);\n            }\n        });\n    });\n};\nexport default {\n    BaseProvider,\n    formProvider\n};\n"]}