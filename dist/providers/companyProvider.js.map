{"version":3,"sources":["../../src/providers/companyProvider.js"],"names":["BaseProvider","provideCompany","validate","body","validationResult","Promise","resolve","reject","notEmpty","then","result","isEmpty","array","msg","updateCompany","address","billingAddress","mailingAddress"],"mappings":";;;;;;AAAA;;IAAYA,Y;;AACZ;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AACzD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,iBAAS,aAAT,EAAwB,+BAAxB,EAAyDM,QAAzD;AACA;AACAN,iBAAS,SAAT,EAAoB,0BAApB,EAAgDM,QAAhD;AACAN,iBAAS,KAAT,EAAgB,sBAAhB,EAAwCM,QAAxC;AACAN,iBAAS,YAAT,EAAuB,6BAAvB,EAAsDM,QAAtD;AACA;AACAN,iBAAS,gBAAT,EAA2B,iCAA3B,EAA8DM,QAA9D;AACAN,iBAAS,gBAAT,EAA2B,iCAA3B,EAA8DM,QAA9D;AACAN,iBAAS,OAAT,EAAkB,wBAAlB,EAA4CM,QAA5C;AACA;AACA;AACAN,iBAAS,eAAT,EAA0B,gCAA1B,EAA4DM,QAA5D;AACAN,iBAAS,WAAT,EAAsB,4BAAtB,EAAoDM,QAApD;AACAN,iBAAS,eAAT,EAA0B,gCAA1B,EAA4DM,QAA5D;AACAN,iBAAS,aAAT,EAAwB,8BAAxB,EAAwDM,QAAxD;AACAJ,yBAAiBK,IAAjB,CAAsB,UAASC,MAAT,EAAiB;AACnC,gBAAI,CAACA,OAAOC,OAAP,EAAL,EAAuB;AACnBJ,uBAAOG,OAAOE,KAAP,GAAe,CAAf,EAAkBC,GAAzB;AACH,aAFD,MAEO;AACHV,qBAAK,WAAL,IAAoB,kBAApB;AACAG,wBAAQH,IAAR;AACH;AACJ,SAPD;AAQH,KAxBM,CAAP;AAyBH,CA1BD;;AA4BA,IAAMW,gBAAgB,SAAhBA,aAAgB,CAACZ,QAAD,EAAWC,IAAX,EAAiBC,gBAAjB,EAAsC;AACxD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCJ,aAAK,SAAL,IAAkB,CAACA,KAAKY,OAAN,EAAeZ,KAAKa,cAApB,EAAoCb,KAAKc,cAAzC,CAAlB;AACA,eAAOd,KAAKa,cAAZ;AACA,eAAOb,KAAKc,cAAZ;AACAX,gBAAQH,IAAR;AAEH,KANM,CAAP;AAOH,CARD;kBASe;AACXH,8BADW;AAEXC,kCAFW;AAGXa;AAHW,C","file":"companyProvider.js","sourcesContent":["import * as BaseProvider from \"./BaseProvider\";\nimport util from \"util\";\nimport crypto from \"crypto\";\nimport uuidv4 from 'uuid/v4';\n\nconst provideCompany = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        validate(\"companyName\", \" companyName Required field!!\").notEmpty();\n        // validate(\"companyAdmin\", \"companyAdmin Required field!!\").notEmpty();\n        validate(\"address\", \"address Required field!!\").notEmpty();\n        validate(\"dob\", \"dob Required field!!\").notEmpty();\n        validate(\"modifiedBy\", \"modifiedBy Required field!!\").notEmpty();\n        // validate(\"companyId\", \"companyId Required field!!\").notEmpty();\n        validate(\"billingAddress\", \"billingAddress Required field!!\").notEmpty();\n        validate(\"mailingAddress\", \"mailingAddress Required field!!\").notEmpty();\n        validate(\"email\", \"email Required field!!\").notEmpty();\n        // validate(\"userid\", \"userid Required field!!\").notEmpty();\n        // validate(\"lastLogin\", \"lastLogin Required field!!\").notEmpty();\n        validate(\"loginLocation\", \"loginLocation Required field!!\").notEmpty();\n        validate(\"homePhone\", \"homePhone Required field!!\").notEmpty();\n        validate(\"businessPhone\", \"businessPhone Required field!!\").notEmpty();\n        validate(\"mobilePhone\", \"mobilePhone Required field!!\").notEmpty();\n        validationResult.then(function(result) {\n            if (!result.isEmpty()) {\n                reject(result.array()[0].msg);\n            } else {\n                body['idcompany'] = uuidv4();\n                resolve(body);\n            }\n        });\n    });\n};\n\nconst updateCompany = (validate, body, validationResult) => {\n    return new Promise((resolve, reject) => {\n        body['address'] = [body.address, body.billingAddress, body.mailingAddress];\n        delete body.billingAddress;\n        delete body.mailingAddress;\n        resolve(body)\n\n    });\n}\nexport default {\n    BaseProvider,\n    provideCompany,\n    updateCompany\n};"]}