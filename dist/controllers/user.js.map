{"version":3,"sources":["../../src/controllers/user.js"],"names":["UserController","register","req","res","next","userRegistration","checkBody","body","getValidationResult","then","val","Math","floor","random","send","phone","OTPS","smsResponse","console","log","_db","create","response","json","data","status","message","err","handleErrorResponse","login","findOne","where","verifyOTP","id","otp","controller"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEaA,c,WAAAA,c;;;;;;;;;;;;;;0MAETC,Q,GAAW,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3B,mCAAaC,gBAAb,CAA8BH,IAAII,SAAlC,EAA6CJ,IAAIK,IAAjD,EAAuDL,IAAIM,mBAAJ,EAAvD,EAAkFC,IAAlF,CAAuF,UAACF,IAAD,EAAU;AAC7F,oBAAIG,MAAMC,KAAKC,KAAL,CAAW,OAAOD,KAAKE,MAAL,KAAgB,IAAlC,CAAV;AACAN,qBAAK,MAAL,IAAeG,GAAf;AACA,kCAAQI,IAAR,CAAaP,KAAKQ,KAAlB,EAAyBR,KAAKS,IAA9B,EAAoCP,IAApC,CAAyC,UAACQ,WAAD,EAAiB;AACtDC,4BAAQC,GAAR,CAAYZ,IAAZ;AACA,0BAAKa,GAAL,CAASf,gBAAT,CAA0BgB,MAA1B,CAAiCd,IAAjC,EAAuCE,IAAvC,CAA4C,UAACa,QAAD,EAAc;AACtDnB,4BAAIoB,IAAJ,CAAS,EAAEC,MAAMF,QAAR,EAAkBG,QAAQ,CAA1B,EAA6BC,SAAS,SAAtC,EAAT;AACH,qBAFD,EAEG,UAACC,GAAD;AAAA,+BAAS,MAAKC,mBAAL,CAAyBzB,GAAzB,EAA8BwB,GAA9B,CAAT;AAAA,qBAFH;AAGH,iBALD,EAKG,UAACA,GAAD,EAAS;AACR,0BAAKC,mBAAL,CAAyBzB,GAAzB,EAA8BwB,GAA9B;AACH,iBAPD;AAQH,aAXD,EAWG,UAACA,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBzB,GAAzB,EAA8BwB,GAA9B,CAAT;AAAA,aAXH;AAYH,S,QAEDE,K,GAAQ,UAAC3B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,kBAAKgB,GAAL,CAASf,gBAAT,CAA0ByB,OAA1B,CAAkC,EAAEC,OAAO,EAAEhB,OAAOb,IAAIK,IAAJ,CAASQ,KAAlB,EAAT,EAAlC,EAAwEN,IAAxE,CAA6E,UAACa,QAAD,EAAc;AACvF,oBAAIA,QAAJ,EAAc;AACVnB,wBAAIoB,IAAJ,CAAS,EAAEC,MAAMF,QAAR,EAAkBG,QAAQ,CAA1B,EAA6BC,SAAS,SAAtC,EAAT;AACH,iBAFD,MAEO;AACH,0BAAKE,mBAAL,CAAyBzB,GAAzB,EAA8B,WAA9B;AACH;AACJ,aAND,EAMG,UAACwB,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBzB,GAAzB,EAA8BwB,GAA9B,CAAT;AAAA,aANH;AAOH,S,QAEDK,S,GAAY,UAAC9B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5Bc,oBAAQC,GAAR,CAAYjB,IAAIK,IAAhB;AACA,kBAAKa,GAAL,CAASf,gBAAT,CAA0ByB,OAA1B,CAAkC,EAAEC,OAAO,EAAEE,IAAI/B,IAAIK,IAAJ,CAAS0B,EAAf,EAAmBjB,MAAMd,IAAIK,IAAJ,CAAS2B,GAAlC,EAAT,EAAlC,EAAsFzB,IAAtF,CAA2F,UAACa,QAAD,EAAc;AACrG,oBAAIA,QAAJ,EAAc;AACVnB,wBAAIoB,IAAJ,CAAS,EAAEC,MAAMF,QAAR,EAAkBG,QAAQ,CAA1B,EAA6BC,SAAS,SAAtC,EAAT;AACH,iBAFD,MAEO;AACH,0BAAKE,mBAAL,CAAyBzB,GAAzB,EAA8B,WAA9B;AACH;AACJ,aAND,EAMG,UAACwB,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBzB,GAAzB,EAA8BwB,GAA9B,CAAT;AAAA,aANH;AAOH,S;;;;;;AAGL,IAAMQ,aAAa,IAAInC,cAAJ,EAAnB;kBACemC,U","file":"user.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport userProvider from '../providers/userProvider';\nimport _ from \"lodash\";\nimport sendSMS from './../service/sendSMS';\n\nexport class UserController extends BaseAPIController {\n\n    register = (req, res, next) => {\n        userProvider.userRegistration(req.checkBody, req.body, req.getValidationResult()).then((body) => {\n            var val = Math.floor(1000 + Math.random() * 9000);\n            body['OTPS'] = val;\n            sendSMS.send(body.phone, body.OTPS).then((smsResponse) => {\n                console.log(body)\n                this._db.userRegistration.create(body).then((response) => {\n                    res.json({ data: response, status: 1, message: 'success' });\n                }, (err) => this.handleErrorResponse(res, err))\n            }, (err) => {\n                this.handleErrorResponse(res, err)\n            })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    login = (req, res, next) => {\n        this._db.userRegistration.findOne({ where: { phone: req.body.phone } }).then((response) => {\n            if (response) {\n                res.json({ data: response, status: 1, message: 'success' })\n            } else {\n                this.handleErrorResponse(res, 'not found')\n            }\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    verifyOTP = (req, res, next) => {\n        console.log(req.body)\n        this._db.userRegistration.findOne({ where: { id: req.body.id, OTPS: req.body.otp } }).then((response) => {\n            if (response) {\n                res.json({ data: response, status: 1, message: 'success' })\n            } else {\n                this.handleErrorResponse(res, 'not found')\n            }\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n}\n\nconst controller = new UserController();\nexport default controller;"]}