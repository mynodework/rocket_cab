{"version":3,"sources":["../../src/controllers/form.js"],"names":["AccountController","saveStructure","req","res","next","body","Date","formProvider","checkBody","getValidationResult","then","formStructure","create","response","json","err","handleErrorResponse","updateStructure","update","_id","params","mongo_id","getAllForms","find","getFormById","findOne","formData","form_id","form_data","updateFromData","insertFormData","data","serachFromData","order","limit","page","keyword","sort","mySort","where","query","name","RegExp","skip","parseInt","items","count","catch","console","log","deleteFormData","id","remove","findAllCount","controller"],"mappings":"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","file":"form.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport db from \"../mongodb/db\";\nimport crypto from 'crypto';\nimport FormProvider from '../providers/FormProvider';\n\nexport class AccountController extends BaseAPIController {\n\n    saveStructure = (req, res, next) => {\n        req.body['form-id'] = new Date();\n        FormProvider.formProvider(req.checkBody, req.body, req.getValidationResult()).then((body) => {\n            req.formStructure.create(body).then((response) => {\n                res.json(response)\n            }, (err) => this.handleErrorResponse(res, err))\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    /*update structure*/\n    updateStructure = (req, res, next) => {\n        req.formStructure.update({ _id: req.params.mongo_id }, req.body).then((response) => {\n            res.json(response)\n        })\n    }\n\n    /*get all forms*/\n\n    getAllForms = (req, res, next) => {\n        req.formStructure.find({}, { '_id': 1, 'name': 1, 'form-id': 1 }).then((response) => {\n            res.json(response)\n        })\n    }\n\n    /*get form by id*/\n    getFormById = (req, res, next) => {\n        req.formStructure.findOne({ _id: req.params.mongo_id }).then((response) => {\n            req.formData.findOne({ 'form-id': req.params.form_id }).then((form_data) => {\n                if (form_data && form_data._id) {\n                    res.json({ formStructure: response, formData: form_data })\n                } else {\n                    res.json({ formStructure: response, formData: [] })\n                }\n            })\n        })\n    }\n\n    /*update form data */\n    updateFromData = (req, res, next) => {\n        req.formData.update({ \"form-id\": req.params.mongo_id }, req.body).then((response) => {\n            res.json(response);\n        })\n    }\n\n    insertFormData = (req, res, next) => {\n        req.formData.create(req.body).then((data) => {\n            res.json(data)\n        })\n    }\n\n    /*Search form data*/\n    serachFromData = (req, res, next) => {\n        let { order, limit, page, keyword, sort } = req.params\n        let mySort = {}\n        mySort[`${sort}`] = order;\n        let where;\n        let query = {}\n        if (keyword !== 'null') {\n            where = [{ name: new RegExp(keyword, 'i') }, { 'process-id': new RegExp(keyword, 'i') }, { 'nteraction-id': new RegExp(keyword, 'i') }, { 'task-id': new RegExp(keyword, 'i') }, { 'creator': new RegExp(keyword, 'i') }, { 'company-id': new RegExp(keyword, 'i') }]\n            query['$or'] = where\n        }\n        req.formStructure.find(query).sort(mySort).skip((parseInt(page) - 1) * parseInt(limit)).limit(parseInt(limit)).then((data) => {\n            res.json({ items: data, count: req.count })\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n\n    /*Delete form data*/\n    deleteFormData = (req, res, next) => {\n        let id = req.params.id;\n        req.formStructure.remove({ _id: id }).then((response) => {\n            res.json(response)\n        })\n    }\n\n    /*findAllCount*/\n    findAllCount = (req, res, next) => {\n        let { keyword } = req.params\n        let where;\n        let query = {}\n        if (keyword !== 'null') {\n            where = [{ name: new RegExp(keyword, 'i') }, { 'process-id': new RegExp(keyword, 'i') }, { 'nteraction-id': new RegExp(keyword, 'i') }, { 'task-id': new RegExp(keyword, 'i') }, { 'creator': new RegExp(keyword, 'i') }, { 'company-id': new RegExp(keyword, 'i') }]\n            query['$or'] = where\n        }\n        req.formStructure.find(query).count().then((data) => {\n            req.count = data;\n            next()\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n}\n\nconst controller = new AccountController();\nexport default controller;"]}