{"version":3,"sources":["../../src/controllers/company.js"],"names":["CompanyController","addCompany","req","res","next","provideCompany","checkBody","body","getValidationResult","then","address","bulkCreate","billingAddress","mailingAddress","address_response","filter","filtered_data","dataValues","type","idaddress","company","create","response","json","status","message","data","err","handleErrorResponse","getAllCompany","getCompanies","updateCompany","updateAddress","address_updated","company_id","idcompany","update","where","updated_company_info","address_data","callback","address_info","splice","address_id","length","deleteCompany","destroy","params","getComapnyBbyId","findById","re","controller"],"mappings":"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","file":"company.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport companyProvider from '../providers/companyProvider';\nimport db from '../db';\nimport _ from \"lodash\";\n\nexport class CompanyController extends BaseAPIController {\n\n    addCompany = (req, res, next) => {\n        companyProvider.provideCompany(req.checkBody, req.body, req.getValidationResult()).then((body) => {\n            db.address.bulkCreate([body.address, body.billingAddress, body.mailingAddress]).then((address_response) => {\n                body.address = _.filter(address_response, (filtered_data) => { return filtered_data.dataValues.type == \"address\" })[0].dataValues.idaddress;\n                body.billingAddress = _.filter(address_response, (filtered_data) => { return filtered_data.dataValues.type == \"billingAddress\" })[0].dataValues.idaddress;\n                body.mailingAddress = _.filter(address_response, (filtered_data) => { return filtered_data.dataValues.type == \"mailingAddress\" })[0].dataValues.idaddress;\n                db.company.create(body).then((response) => {\n                    res.json({ status: 1, message: \"success\", data: response })\n                }, (err) => this.handleErrorResponse(res, err))\n            })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    getAllCompany = (req, res, next) => {\n        db.company.getCompanies(db).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    updateCompany = (req, res, next) => {\n        companyProvider.updateCompany(req.checkBody, req.body, req.getValidationResult()).then((body) => {\n            updateAddress(body.address, function(address_updated) {\n                delete body.address;\n                let company_id = body.idcompany;\n                delete body.idcompany;\n                db.company.update(body, { where: { idcompany: company_id } }).then((updated_company_info) => {\n                    res.json({ status: 1, message: \"Company details updated\" })\n                }, (err) => this.handleErrorResponse(res, err))\n            }, (err) => this.handleErrorResponse(res, err))\n        })\n        let updateAddress = (address_data, callback) => {\n            let address_info = address_data.splice(0, 1)[0];\n            let address_id = address_info.idaddress;\n            delete address_info.idaddress;\n            db.address.update(address_info, { where: { idaddress: address_id } }).then((response) => {\n                if (address_data.length) {\n                    updateAddress(address_data, callback)\n                } else {\n                    callback(response)\n                }\n            }, (err) => this.handleErrorResponse(res, err))\n        }\n    }\n\n    deleteCompany = (req, res, next) => {\n        db.company.destroy({ where: { idcompany: req.params.idcompany } }).then((response) => {\n            res.json({ status: 1, message: \"deleted\", data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    getComapnyBbyId = (req, res, next) => {\n        db.company.findById(re)\n    }\n}\n\nconst controller = new CompanyController();\nexport default controller;"]}