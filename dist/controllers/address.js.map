{"version":3,"sources":["../../src/controllers/address.js"],"names":["AddressController","addAddress","req","res","next","address","create","body","then","response","json","err","handleErrorResponse","getAllAddress","findAll","updateAddress","update","where","idaddress","status","data","deleteAddress","destroy","params","message","controller"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;AADA;;;IAGaA,iB,WAAAA,iB;;;;;;;;;;;;;;gNAETC,U,GAAa,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7B,yBAAGC,OAAH,CAAWC,MAAX,CAAkBJ,IAAIK,IAAtB,EAA4BC,IAA5B,CAAiC,UAACC,QAAD,EAAc;AAC3CN,oBAAIO,IAAJ,CAASD,QAAT;AACH,aAFD,EAEG,UAACE,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBT,GAAzB,EAA8BQ,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDE,a,GAAgB,UAACX,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,yBAAGC,OAAH,CAAWS,OAAX,CAAmB,EAAnB,EAAuBN,IAAvB,CAA4B,UAACC,QAAD,EAAc;AACtCN,oBAAIO,IAAJ,CAASD,QAAT;AACH,aAFD,EAEG,UAACE,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBT,GAAzB,EAA8BQ,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDI,a,GAAgB,UAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,yBAAGC,OAAH,CAAWW,MAAX,CAAkBd,IAAIK,IAAtB,EAA4B,EAAEU,OAAO,EAAEC,WAAWhB,IAAIK,IAAJ,CAASW,SAAtB,EAAT,EAA5B,EAA0EV,IAA1E,CAA+E,UAACC,QAAD,EAAc;AACzFN,oBAAIO,IAAJ,CAAS,EAAES,QAAQ,CAAV,EAAaC,MAAMX,QAAnB,EAAT;AACH,aAFD,EAEG,UAACE,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBT,GAAzB,EAA8BQ,GAA9B,CAAT;AAAA,aAFH;AAGH,S,QAEDU,a,GAAgB,UAACnB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,yBAAGC,OAAH,CAAWiB,OAAX,CAAmB,EAAEL,OAAO,EAAEC,WAAWhB,IAAIqB,MAAJ,CAAWL,SAAxB,EAAT,EAAnB,EAAmEV,IAAnE,CAAwE,UAACC,QAAD,EAAc;AAClFN,oBAAIO,IAAJ,CAAS,EAAES,QAAQ,CAAV,EAAaK,SAAS,SAAtB,EAAiCJ,MAAMX,QAAvC,EAAT;AACH,aAFD,EAEG,UAACE,GAAD;AAAA,uBAAS,MAAKC,mBAAL,CAAyBT,GAAzB,EAA8BQ,GAA9B,CAAT;AAAA,aAFH;AAGH,S;;;;;;AAIL,IAAMc,aAAa,IAAIzB,iBAAJ,EAAnB;kBACeyB,U","file":"address.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\n// import companyProvider from '../providers/companyProvider';\nimport db from '../db';\n\nexport class AddressController extends BaseAPIController {\n\n    addAddress = (req, res, next) => {\n        db.address.create(req.body).then((response) => {\n            res.json(response)\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    getAllAddress = (req, res, next) => {\n        db.address.findAll({}).then((response) => {\n            res.json(response)\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    updateAddress = (req, res, next) => {\n        db.address.update(req.body, { where: { idaddress: req.body.idaddress } }).then((response) => {\n            res.json({ status: 1, data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n    deleteAddress = (req, res, next) => {\n        db.address.destroy({ where: { idaddress: req.params.idaddress } }).then((response) => {\n            res.json({ status: 1, message: \"deleted\", data: response })\n        }, (err) => this.handleErrorResponse(res, err))\n    }\n\n}\n\nconst controller = new AddressController();\nexport default controller;"]}