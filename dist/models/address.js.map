{"version":3,"sources":["../../src/models/address.js"],"names":["sequelize","DataTypes","address","define","idaddress","type","INTEGER","primaryKey","autoIncrement","STRING","address1","address2","suburb","postcode","state","country","address3","streetNumber","createdBy","modifiedBy","addresscol","freezeTableName","createdAt","updatedAt","assosiate","models","company","belongsTo","foreignKey"],"mappings":";;;;;;kBAAe,UAASA,SAAT,EAAoBC,SAApB,EAA+B;AAC1C,QAAMC,UAAUF,UAAUG,MAAV,CAAiB,SAAjB,EAA4B;AACxCC,mBAAW;AACPC,kBAAMJ,UAAUK,OADT;AAEPC,wBAAY,IAFL;AAGPC,2BAAe;AAHR,SAD6B;AAMxCH,cAAMJ,UAAUQ,MAAV,CAAiB,GAAjB,CANkC;AAOxCC,kBAAUT,UAAUQ,MAAV,CAAiB,GAAjB,CAP8B;AAQxCE,kBAAUV,UAAUQ,MAAV,CAAiB,GAAjB,CAR8B;AASxCG,gBAAQX,UAAUQ,MAAV,CAAiB,GAAjB,CATgC;AAUxCI,kBAAUZ,UAAUQ,MAAV,CAAiB,EAAjB,CAV8B;AAWxCK,eAAOb,UAAUQ,MAAV,CAAiB,GAAjB,CAXiC;AAYxCM,iBAASd,UAAUQ,MAAV,CAAiB,GAAjB,CAZ+B;AAaxCO,kBAAUf,UAAUQ,MAAV,CAAiB,EAAjB,CAb8B;AAcxCQ,sBAAchB,UAAUQ,MAAV,CAAiB,EAAjB,CAd0B;AAexCS,mBAAWjB,UAAUQ,MAAV,CAAiB,EAAjB,CAf6B;AAgBxCU,oBAAYlB,UAAUQ,MAAV,CAAiB,EAAjB,CAhB4B;AAiBxCW,oBAAYnB,UAAUQ,MAAV,CAAiB,EAAjB;AAjB4B,KAA5B,EAkBb;AACCY,yBAAiB,IADlB;AAECC,mBAAW,SAFZ;AAGCC,mBAAW;AAHZ,KAlBa,CAAhB;AAuBArB,YAAQsB,SAAR,GAAoB,UAACC,MAAD,EAAY;AAC5BA,eAAOC,OAAP,CAAeC,SAAf,CAAyBF,OAAOvB,OAAhC,EAAyC,EAAE0B,YAAY,SAAd,EAAzC;AAEH,KAHD;AAIA,WAAO1B,OAAP;AACH,C","file":"address.js","sourcesContent":["export default function(sequelize, DataTypes) {\n    const address = sequelize.define(\"address\", {\n        idaddress: {\n            type: DataTypes.INTEGER,\n            primaryKey: true,\n            autoIncrement: true,\n        },\n        type: DataTypes.STRING(128),\n        address1: DataTypes.STRING(256),\n        address2: DataTypes.STRING(256),\n        suburb: DataTypes.STRING(256),\n        postcode: DataTypes.STRING(64),\n        state: DataTypes.STRING(256),\n        country: DataTypes.STRING(256),\n        address3: DataTypes.STRING(64),\n        streetNumber: DataTypes.STRING(64),\n        createdBy: DataTypes.STRING(64),\n        modifiedBy: DataTypes.STRING(64),\n        addresscol: DataTypes.STRING(45)\n    }, {\n        freezeTableName: true,\n        createdAt: 'created',\n        updatedAt: 'modified',\n    })\n    address.assosiate = (models) => {\n        models.company.belongsTo(models.address, { foreignKey: 'address' });\n\n    }\n    return address;\n}"]}