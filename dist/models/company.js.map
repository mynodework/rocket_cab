{"version":3,"sources":["../../src/models/company.js"],"names":["sequelize","DataTypes","company","define","idcompany","type","UUID","primaryKey","companyName","STRING","companyAdmin","INTEGER","address","modifiedBy","companyId","billingAddress","mailingAddress","email","userID","lastLogin","DATE","loginLocation","businessPhone","websiteURL","knowledgebase","logo","indexes","hooks","beforeCreate","body","Promise","resolve","reject","findOne","where","then","user","freezeTableName","createdAt","updatedAt","associate","models","billingAccount","belongsTo","foreignKey","as","attachment","hasMany","hasOne","process_table","task","form","identityRelationship","getCompanies","db","companyInformation","findAll","data","getAddress","response","catch","err","callback","companyData","splice","$or","idaddress","addressData","dataValues","filter","filtered_data","push","length"],"mappings":"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","file":"company.js","sourcesContent":["import _ from \"lodash\";\n\nexport default function(sequelize, DataTypes) {\n    const company = sequelize.define(\"company\", {\n        idcompany: {\n            type: DataTypes.UUID,\n            primaryKey: true,\n        },\n        companyName: DataTypes.STRING(256),\n        companyAdmin: DataTypes.INTEGER,\n        address: DataTypes.INTEGER,\n        modifiedBy: DataTypes.STRING(64),\n        companyId: DataTypes.STRING(2048),\n        billingAddress: DataTypes.INTEGER,\n        mailingAddress: DataTypes.INTEGER,\n        email: DataTypes.STRING(512),\n        userID: DataTypes.INTEGER,\n        lastLogin: DataTypes.DATE,\n        loginLocation: DataTypes.STRING(64),\n        businessPhone: DataTypes.STRING(64),\n        websiteURL: DataTypes.STRING(512),\n        knowledgebase: DataTypes.STRING(2048),\n        logo: DataTypes.STRING(64),\n    }, {\n\n        indexes: [],\n        hooks: {\n            beforeCreate: function(body) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({\n                            where: {\n                                companyName: body.companyName\n                            }\n                        })\n                        .then((user) => {\n                            if (user) {\n                                reject(\"company Already exist\");\n                            } else {\n                                resolve()\n                            }\n                        })\n                })\n            }\n        },\n        freezeTableName: true,\n        createdAt: 'created',\n        updatedAt: 'modified'\n    });\n\n    company.associate = function(models) {\n        models.billingAccount.belongsTo(models.address, { foreignKey: 'address', as: 'billingAccount_address' });\n\n        models.billingAccount.belongsTo(models.address, { foreignKey: 'billingAddress', as: 'billingAccount_billingAddress' });\n\n        models.billingAccount.belongsTo(models.address, { foreignKey: 'mailingAddress', as: 'billingAccount_mailingAddress' });\n\n        models.billingAccount.belongsTo(models.attachment, { foreignKey: 'logo' });\n\n        models.user.hasMany(models.company, { foreignKey: 'companyAdmin', as: 'adminUser' });\n\n        models.address.hasOne(models.company, { foreignKey: 'address', as: 'company_user_address1' });\n\n        models.address.hasOne(models.company, { foreignKey: 'billingAddress', as: 'company_user_address2' });\n\n        models.address.hasOne(models.company, { foreignKey: 'mailingAddress', as: 'company_user_address3' });\n\n        models.user.hasMany(models.company, { foreignKey: 'userID', as: 'user_id' });\n\n        models.process_table.belongsTo(models.company, { foreignKey: 'companyID' });\n\n        models.process_table.hasOne(models.task, { foreignKey: 'relatedProcess' });\n\n        models.form.hasOne(models.task, { foreignKey: 'formID' })\n\n        models.identityRelationship.hasMany(models.company, { foreignKey: \"ididentityRelationship\", as: \"company_identityRelationship\" });\n\n    }\n\n    company.getCompanies = function(db) {\n        return new Promise((resolve, reject) => {\n            let companyInformation = [];\n            company.findAll({}).then((data) => {\n                getAddress(data, function(response) {\n                    resolve(response)\n                })\n            }).catch(err => {\n                reject(err)\n            })\n            let getAddress = (data, callback) => {\n                let companyData = data.splice(0, 1)[0];\n                db.address.findAll({ where: { $or: [{ idaddress: companyData.address }, { idaddress: companyData.billingAddress }, { idaddress: companyData.mailingAddress }] } }).then((addressData) => {\n                    companyData.dataValues['address'] = _.filter(addressData, (filtered_data) => { return filtered_data.type == \"address\" })[0];\n                    companyData.dataValues['billingAddress'] = _.filter(addressData, (filtered_data) => { return filtered_data.type == \"billingAddress\" })[0];\n                    companyData.dataValues['mailingAddress'] = _.filter(addressData, (filtered_data) => { return filtered_data.type == \"mailingAddress\" })[0];\n                    companyInformation.push(companyData)\n                    if (data.length) {\n                        getAddress(data, callback)\n                    } else {\n                        callback(companyInformation)\n                    }\n                })\n            }\n        })\n    }\n\n    return company;\n}"]}