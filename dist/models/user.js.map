{"version":3,"sources":["../../src/models/user.js"],"names":["sequelize","DataTypes","user","define","idCustomer","type","INTEGER","primaryKey","autoIncrement","firstName","STRING","surname","salutation","address","dob","DATE","modifiedBy","companyId","billingAddress","mailingAddress","email","userid","lastLogin","loginLocation","homePhone","businessPhone","mobilePhone","communicationMethod","createdBy","active","pitcture","identityRelationship","password","allowNull","indexes","fields","attribute","order","freezeTableName","createdAt","updatedAt","hooks","beforeCreate","body","Promise","resolve","reject","findOne","where","then","associate","models","process_table","belongsTo","foreignKey","getCompanyUsers","findAll","data","catch","err"],"mappings":"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","file":"user.js","sourcesContent":["export default function(sequelize, DataTypes) {\n    const user = sequelize.define(\"user\", {\n        idCustomer: {\n            type: DataTypes.INTEGER,\n            primaryKey: true,\n            autoIncrement: true,\n        },\n        firstName: DataTypes.STRING(256),\n        surname: DataTypes.STRING(256),\n        salutation: DataTypes.STRING(32),\n        address: DataTypes.INTEGER,\n        dob: DataTypes.DATE,\n        modifiedBy: DataTypes.STRING(64),\n        companyId: DataTypes.STRING(64),\n        billingAddress: DataTypes.INTEGER,\n        mailingAddress: DataTypes.INTEGER,\n        email: DataTypes.STRING(2048),\n        userid: DataTypes.STRING(2048),\n        lastLogin: DataTypes.DATE,\n        loginLocation: DataTypes.STRING(256),\n        homePhone: DataTypes.STRING(64),\n        businessPhone: DataTypes.STRING(64),\n        mobilePhone: DataTypes.STRING(64),\n        communicationMethod: DataTypes.STRING(64),\n        createdBy: DataTypes.STRING(64),\n        active: DataTypes.STRING(32),\n        pitcture: DataTypes.INTEGER,\n        identityRelationship: DataTypes.INTEGER,\n        password: {\n            type: DataTypes.STRING(64),\n            allowNull: false\n        }\n    }, {\n        indexes: [{\n                fields: [{ attribute: 'address', order: 'ASC' }]\n            },\n            {\n                fields: [{ attribute: 'billingAddress', order: 'ASC' }]\n            },\n            {\n                fields: [{ attribute: 'mailingAddress', order: 'ASC' }]\n            },\n            {\n                fields: [{ attribute: 'identityRelationship', order: 'ASC' }]\n            }\n        ],\n        freezeTableName: true,\n        createdAt: 'created',\n        updatedAt: 'modified',\n        hooks: {\n            beforeCreate: function(body) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({\n                        where: {\n                            email: body.email\n                        }\n                    }).then((user) => {\n                        if (user) {\n                            reject(\"user already exist\");\n                        } else {\n                            resolve()\n                        }\n                    })\n                })\n\n            }\n        }\n    })\n\n    user.associate = (models) => {\n        models.process_table.belongsTo(models.user, { foreignKey: 'userID' });\n    }\n\n    user.getCompanyUsers = function(companyId) {\n        return new Promise((resolve, reject) => {\n            user.findAll({ where: { companyId: companyId } }).then((data) => {\n                resolve(data);\n            }).catch(err => reject(err))\n        })\n    }\n\n    return user;\n}"]}