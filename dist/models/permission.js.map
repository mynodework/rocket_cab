{"version":3,"sources":["../../src/models/permission.js"],"names":["sequelize","DataTypes","permission","define","idPermission","type","UUID","primaryKey","permissionName","STRING","permissionDetails","updatedBy","createdBy","hooks","beforeCreate","body","Promise","resolve","reject","findOne","where","then","user","freezeTableName","createdAt","updatedAt","associate","models","identityRelationship","hasMany","foreignKey","as"],"mappings":";;;;;;kBAAe,UAASA,SAAT,EAAoBC,SAApB,EAA+B;AAC1C,QAAMC,aAAaF,UAAUG,MAAV,CAAiB,YAAjB,EAA+B;AAC9CC,sBAAc;AACVC,kBAAMJ,UAAUK,IADN;AAEVC,wBAAY;AAFF,SADgC;AAK9CC,wBAAgBP,UAAUQ,MAAV,CAAiB,EAAjB,CAL8B;AAM9CC,2BAAmBT,UAAUQ,MAAV,CAAiB,GAAjB,CAN2B;AAO9CE,mBAAWV,UAAUQ,MAAV,CAAiB,EAAjB,CAPmC;AAQ9CG,mBAAWX,UAAUQ,MAAV,CAAiB,EAAjB;AARmC,KAA/B,EAShB;AACCI,eAAO;AACHC,0BAAc,sBAASC,IAAT,EAAe;AAAA;;AACzB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,0BAAKC,OAAL,CAAa;AACLC,+BAAO;AACHZ,4CAAgBO,KAAKP;AADlB;AADF,qBAAb,EAKKa,IALL,CAKU,UAACC,IAAD,EAAU;AACZ,4BAAIA,IAAJ,EAAU;AACNJ,mCAAO,0BAAP;AACH,yBAFD,MAEO;AACHD;AACH;AACJ,qBAXL;AAYH,iBAbM,CAAP;AAeH;AAjBE,SADR;AAoBCM,yBAAiB,IApBlB;AAqBCC,mBAAW,SArBZ;AAsBCC,mBAAW;AAtBZ,KATgB,CAAnB;AAiCAvB,eAAWwB,SAAX,GAAuB,UAASC,MAAT,EAAiB;AACpCA,eAAOC,oBAAP,CAA4BC,OAA5B,CAAoCF,OAAOzB,UAA3C,EAAuD,EAAE4B,YAAY,wBAAd,EAAwCC,IAAI,iCAA5C,EAAvD;AACH,KAFD;;AAIA,WAAO7B,UAAP;AACH,C","file":"permission.js","sourcesContent":["export default function(sequelize, DataTypes) {\n    const permission = sequelize.define(\"permission\", {\n        idPermission: {\n            type: DataTypes.UUID,\n            primaryKey: true,\n        },\n        permissionName: DataTypes.STRING(45),\n        permissionDetails: DataTypes.STRING(128),\n        updatedBy: DataTypes.STRING(45),\n        createdBy: DataTypes.STRING(45)\n    }, {\n        hooks: {\n            beforeCreate: function(body) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({\n                            where: {\n                                permissionName: body.permissionName\n                            }\n                        })\n                        .then((user) => {\n                            if (user) {\n                                reject(\"permission Already exist\");\n                            } else {\n                                resolve()\n                            }\n                        })\n                })\n\n            }\n        },\n        freezeTableName: true,\n        createdAt: 'created',\n        updatedAt: 'updated',\n    })\n    permission.associate = function(models) {\n        models.identityRelationship.hasMany(models.permission, { foreignKey: \"ididentityRelationship\", as: \"permission_identityRelationship\" });\n    }\n\n    return permission;\n}"]}