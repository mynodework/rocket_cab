{"version":3,"sources":["../../src/models/userRegistration.js"],"names":["sequelize","DataTypes","userRegistration","define","id","type","INTEGER","autoIncrement","allowNull","unique","phone","STRING","primaryKey","token","OTPS","name","email","password","mail_verification","mail_statsus","user_pic","indexes","freezeTableName","timestamps","hooks","beforeCreate","body","Promise","resolve","reject","findOne","where","then","user"],"mappings":";;;;;;kBAAe,UAASA,SAAT,EAAoBC,SAApB,EAA+B;AAC1C,QAAMC,mBAAmBF,UAAUG,MAAV,CAAiB,mBAAjB,EAAsC;AAC3DC,YAAI;AACAC,kBAAMJ,UAAUK,OADhB;AAEAC,2BAAe,IAFf;AAGAC,uBAAW,IAHX;AAIAC,oBAAQ;AAJR,SADuD;AAO3DC,eAAO;AACHL,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADH;AAEHH,uBAAW,IAFR;AAGHI,wBAAY;AAHT,SAPoD;AAY3DC,eAAO;AACHR,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADH;AAEHH,uBAAW;AAFR,SAZoD;AAgB3DM,cAAM;AACFT,kBAAMJ,UAAUK,OAAV,CAAkB,CAAlB,CADJ;AAEFE,uBAAW;AAFT,SAhBqD;AAoB3DO,cAAM;AACFV,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADJ;AAEFH,uBAAW;AAFT,SApBqD;AAwB3DQ,eAAO;AACHX,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADH;AAEHH,uBAAW;AAFR,SAxBoD;AA4B3DS,kBAAU;AACNZ,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADA;AAENH,uBAAW;AAFL,SA5BiD;AAgC3DU,2BAAmB;AACfb,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADS;AAEfH,uBAAW;AAFI,SAhCwC;AAoC3DW,sBAAc;AACVd,kBAAMJ,UAAUK,OADN;AAEVE,uBAAW;AAFD,SApC6C;AAwC3DY,kBAAU;AACNf,kBAAMJ,UAAUU,MAAV,CAAiB,GAAjB,CADA;AAENH,uBAAW;AAFL;AAxCiD,KAAtC,EA4CtB;AACCa,iBAAS,EADV;AAECC,yBAAiB,IAFlB;AAGCC,oBAAY,KAHb;AAICC,eAAO;AACHC,0BAAc,sBAASC,IAAT,EAAe;AAAA;;AACzB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,0BAAKC,OAAL,CAAa;AACTC,+BAAO;AACHrB,mCAAOgB,KAAKhB;AADT;AADE,qBAAb,EAIGsB,IAJH,CAIQ,UAACC,IAAD,EAAU;AACd,4BAAIA,IAAJ,EAAU;AACNJ,mCAAO,4BAAP;AACH,yBAFD,MAEO;AACHD;AACH;AACJ,qBAVD;AAWH,iBAZM,CAAP;AAaH;AAfE;AAJR,KA5CsB,CAAzB;;AAmEA,WAAO1B,gBAAP;AACH,C","file":"userRegistration.js","sourcesContent":["export default function(sequelize, DataTypes) {\n    const userRegistration = sequelize.define(\"user_registration\", {\n        id: {\n            type: DataTypes.INTEGER,\n            autoIncrement: true,\n            allowNull: true,\n            unique: true\n        },\n        phone: {\n            type: DataTypes.STRING(255),\n            allowNull: true,\n            primaryKey: true\n        },\n        token: {\n            type: DataTypes.STRING(255),\n            allowNull: true\n        },\n        OTPS: {\n            type: DataTypes.INTEGER(5),\n            allowNull: true\n        },\n        name: {\n            type: DataTypes.STRING(255),\n            allowNull: true\n        },\n        email: {\n            type: DataTypes.STRING(255),\n            allowNull: true\n        },\n        password: {\n            type: DataTypes.STRING(255),\n            allowNull: true\n        },\n        mail_verification: {\n            type: DataTypes.STRING(255),\n            allowNull: true\n        },\n        mail_statsus: {\n            type: DataTypes.INTEGER,\n            allowNull: true\n        },\n        user_pic: {\n            type: DataTypes.STRING(255),\n            allowNull: true\n        }\n    }, {\n        indexes: [],\n        freezeTableName: true,\n        timestamps: false,\n        hooks: {\n            beforeCreate: function(body) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({\n                        where: {\n                            phone: body.phone\n                        }\n                    }).then((user) => {\n                        if (user) {\n                            reject(\"phone number already exist\");\n                        } else {\n                            resolve()\n                        }\n                    })\n                })\n            }\n        }\n    })\n\n    return userRegistration;\n}"]}