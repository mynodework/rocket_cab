{"version":3,"sources":["../../src/models/group.js"],"names":["sequelize","DataTypes","group","define","idGroup","type","UUID","primaryKey","groupName","STRING","groupDetails","updatedBy","hooks","beforeCreate","body","Promise","resolve","reject","findOne","where","then","user","freezeTableName","createdAt","updatedAt","associate","models","identityRelationship","hasMany","foreignKey","as"],"mappings":";;;;;;kBAAe,UAASA,SAAT,EAAoBC,SAApB,EAA+B;AAC1C,QAAMC,QAAQF,UAAUG,MAAV,CAAiB,OAAjB,EAA0B;AACpCC,iBAAS;AACLC,kBAAMJ,UAAUK,IADX;AAELC,wBAAY;AAFP,SAD2B;AAKpCC,mBAAWP,UAAUQ,MAAV,CAAiB,EAAjB,CALyB;AAMpCC,sBAAcT,UAAUQ,MAAV,CAAiB,GAAjB,CANsB;AAOpCE,mBAAWV,UAAUQ,MAAV,CAAiB,EAAjB;AAPyB,KAA1B,EAQX;AACCG,eAAO;AACHC,0BAAc,sBAASC,IAAT,EAAe;AAAA;;AACzB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,0BAAKC,OAAL,CAAa;AACLC,+BAAO;AACHX,uCAAWM,KAAKN;AADb;AADF,qBAAb,EAKKY,IALL,CAKU,UAACC,IAAD,EAAU;AACZ,4BAAIA,IAAJ,EAAU;AACNJ,mCAAO,qBAAP;AACH,yBAFD,MAEO;AACHD;AACH;AACJ,qBAXL;AAYH,iBAbM,CAAP;AAeH;AAjBE,SADR;AAoBCM,yBAAiB,IApBlB;AAqBCC,mBAAW,SArBZ;AAsBCC,mBAAW;AAtBZ,KARW,CAAd;;AAiCAtB,UAAMuB,SAAN,GAAkB,UAASC,MAAT,EAAiB;AAC/BA,eAAOC,oBAAP,CAA4BC,OAA5B,CAAoCF,OAAOxB,KAA3C,EAAkD,EAAE2B,YAAY,wBAAd,EAAwCC,IAAI,uBAA5C,EAAlD;AACH,KAFD;;AAIA,WAAO5B,KAAP;AACH,C","file":"group.js","sourcesContent":["export default function(sequelize, DataTypes) {\n    const group = sequelize.define(\"group\", {\n        idGroup: {\n            type: DataTypes.UUID,\n            primaryKey: true,\n        },\n        groupName: DataTypes.STRING(45),\n        groupDetails: DataTypes.STRING(128),\n        updatedBy: DataTypes.STRING(45),\n    }, {\n        hooks: {\n            beforeCreate: function(body) {\n                return new Promise((resolve, reject) => {\n                    this.findOne({\n                            where: {\n                                groupName: body.groupName\n                            }\n                        })\n                        .then((user) => {\n                            if (user) {\n                                reject(\"group Already exist\");\n                            } else {\n                                resolve()\n                            }\n                        })\n                })\n\n            }\n        },\n        freezeTableName: true,\n        createdAt: 'created',\n        updatedAt: 'updated',\n    })\n\n    group.associate = function(models) {\n        models.identityRelationship.hasMany(models.group, { foreignKey: \"ididentityRelationship\", as: \"identity_relationship\" });\n    }\n\n    return group;\n}"]}