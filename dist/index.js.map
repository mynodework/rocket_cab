{"version":3,"sources":["../src/index.js"],"names":["require","config","path","__dirname","app","server","createServer","use","json","limit","process","env","BODYLIMIT","urlencoded","extended","initRoutes","cwd","resolve","err","routes","console","log","forEach","routePath","default","length","listen","PORT","address","port"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACAA,QAAQ,QAAR,EAAkBC,MAAlB,CAAyB,EAACC,MAASC,SAAT,iBAAD,EAAzB,E,CARA;;;AAUA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA;AACAA,IAAIG,GAAJ,CAAQ,qBAAR;;AAEAH,IAAIG,GAAJ,CAAQ,qBAAWC,IAAX,CAAgB;AACpBC,WAAOC,QAAQC,GAAR,CAAYC;AADC,CAAhB,CAAR;AAGAR,IAAIG,GAAJ,CAAQ,qBAAWM,UAAX,CAAsB;AAC1BC,cAAU;AADgB,CAAtB,CAAR;;AAIAV,IAAIG,GAAJ,CAAQ,iCAAR;;AAEA,IAAMQ,aAAa,SAAbA,UAAa,CAACX,GAAD,EAAS;AACxB;AACA,wBAAK,eAAL,EAAsB;AAClBY,aAAK,eAAKC,OAAL,CAAa,OAAb;AADa,KAAtB,EAEG,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAChB,YAAID,GAAJ,EAAS;AACLE,oBAAQC,GAAR,CAAY,gCAAZ;AACA;AACH;AACDF,eAAOG,OAAP,CAAe,UAACC,SAAD,EAAe;AAC1BvB,oBAAQuB,SAAR,EAAmBC,OAAnB,CAA2BpB,GAA3B,EAD0B,CACO;AACpC,SAFD;AAGAgB,gBAAQC,GAAR,CAAY,cAAcF,OAAOM,MAArB,GAA8B,cAA1C;AACH,KAXD;AAYH,CAdD;;AAgBAV,WAAWX,GAAX;AACAA,IAAIC,MAAJ,CAAWqB,MAAX,CAAkBhB,QAAQC,GAAR,CAAYgB,IAA9B;AACAP,QAAQC,GAAR,CAAY,qBAAqBjB,IAAIC,MAAJ,CAAWuB,OAAX,GAAqBC,IAAtD;kBACezB,G","file":"index.js","sourcesContent":["/* eslint-disable*/\nimport http from \"http\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport path from \"path\";\nimport bodyParser from \"body-parser\";\nimport glob from \"glob\";\nimport expressValidator from \"express-validator\";\nrequire('dotenv').config({path: `${__dirname}/process.env`})\n\nconst app = express();\napp.server = http.createServer(app);\n// logger\napp.use(cors());\n\napp.use(bodyParser.json({\n    limit: process.env.BODYLIMIT\n}));\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\n\napp.use(expressValidator());\n\nconst initRoutes = (app) => {\n    // including all routes\n    glob(\"./routes/*.js\", {\n        cwd: path.resolve(\"./src\")\n    }, (err, routes) => {\n        if (err) {\n            console.log(\"Error occured including routes\");\n            return;\n        }\n        routes.forEach((routePath) => {\n            require(routePath).default(app); // eslint-disable-line\n        });\n        console.log(\"included \" + routes.length + \" route files\");\n    });\n};\n\ninitRoutes(app);\napp.server.listen(process.env.PORT);\nconsole.log(\"Started on port \" + app.server.address().port);\nexport default app;"]}